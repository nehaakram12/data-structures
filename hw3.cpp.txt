#include <iostream>
#include <conio.h>
#include <string>
#include "stack.h"
using namespace std;

int priority(char c)
{
	int m;
	if(c=='n')
		m=4;
	else if(c=='p' || c=='m')
		m=3;
	else if(c=='/' || c=='*')
		m=2;
	else if(c=='+' || c=='-')
		m=1;
	else
		m=0;
	return m;
}
bool isBinary(char c1, char c2)
{
	if((c1=='+' && c2==' ') || (c1=='-' && c2==' ') || (c1=='/' && c2==' ') || (c1=='*' && c2==' '))
		return true;
	return false;
}
int isUnary(char c1, char c2)
{
	if(c1=='+' && c2=='+')
		return 1;
	if(c1=='-' && c2=='-')
		return 2;
	if(c1=='-' && (c2>='0' && c2<='9')) 
		return 3;
	return 0;
}
bool isNegative(char c1, char c2, char c3)
{
	if((c1>='0' && c1<='9') && c2=='-' && c3==' ')
		return 1;
	return 0;
}
bool isOperator(char c1, char c2)
{
	if(isBinary(c1,c2)==true)
		return true;
	if(isUnary(c1,c2)!=0)
		return true;
	return false;
}
bool isOperand(char c)
{
	if( c>='0' && c<='9')
		return true;
	return false;
}

vector<char> infixToPostfix(string infix)
{
	char x;
	int i=0;		
	vector<char> postfix;
	stack<char> opstack;

	while(infix[i]!='\0')
	{
		x=infix[i];

		if(x=='(')
			opstack.push(x);

		else if(x==')')
		{
			while(opstack.top()!='(' && opstack.isEmpty()==0)
			{
				if(opstack.top()=='p')
				{
					postfix.push_back('+');
					postfix.push_back('+');
					opstack.pop();
				}
				else if(opstack.top()=='m')
				{
					postfix.push_back('-');
					postfix.push_back('-');
					opstack.pop();
				}
				else if(opstack.top()=='n')
				{
					postfix.push_back('-');
					opstack.pop();
				}
				else
				{
					postfix.push_back(' ');
					postfix.push_back(opstack.top());
					opstack.pop();
				}
			}
			opstack.pop();
		}

		else if( isOperator(x,infix[i+1])==true )
		{
			if(isUnary(x,infix[i+1])!=0)
			{
				int input;
				char push;

				if(isUnary(x,infix[i+1])==1)
				{
					input=priority('p');
					push='p';
				}
				else if(isUnary(x,infix[i+1])==2)
				{
					input=priority('m');
					push='m';
				}
				else if(isUnary(x,infix[i+1])==3)
				{
					input=priority('n');
					push='n';
				}

				int topper=priority(opstack.top());
				while(input<=topper && opstack.top()!='(' && topper!=0 && opstack.isEmpty()==0)
				{
					if(opstack.top()=='p')
					{
						postfix.push_back('+');
						postfix.push_back('+');
						opstack.pop();
					}
					else if(opstack.top()=='m')
					{
						postfix.push_back('-');
						postfix.push_back('-');
						opstack.pop();
					}
					else if(opstack.top()=='n')
					{
						postfix.push_back('-');
						opstack.pop();
					}
					else
					{
						postfix.push_back(' ');
						postfix.push_back(opstack.top());
						opstack.pop();
					}
				}
				opstack.push(push);
				if(push!='n')
					i++;
			}

			else if (isBinary(x,infix[i+1]))
			{
				int input=priority(x);
				int topper=priority(opstack.top());
				while(input<=topper && opstack.top()!='(' && topper!=0 && opstack.isEmpty()==0)
				{
					if(opstack.top()=='p')
					{
						postfix.push_back('+');
						postfix.push_back('+');
						opstack.pop();
					}
					else if(opstack.top()=='m')
					{
						postfix.push_back('-');
						postfix.push_back('-');
						opstack.pop();
					}
					else if(opstack.top()=='n')
					{
						postfix.push_back('-');
						opstack.pop();
					}
					else
					{
						postfix.push_back(' ');
						postfix.push_back(opstack.top());
						opstack.pop();
					}
				}
				opstack.push(x);
			}

		}

		else if(isOperand(x)==true)
		{
			if(i!=0)
				postfix.push_back(' ');
			postfix.push_back(x);
			if(infix[i+1]>='0' && infix[i+1]<='9')
			{
				postfix.push_back(infix[i+1]);
				i++;
			}
		}

		i++;

	}

	while(opstack.isEmpty()==0)
	{
		if(opstack.top()=='p')
		{
			postfix.push_back('+');
			postfix.push_back('+');
			opstack.pop();
		}
		else if(opstack.top()=='m')
		{
			postfix.push_back('-');
			postfix.push_back('-');
			opstack.pop();
		}
		else if(opstack.top()=='n')
		{
			postfix.push_back('-');
			opstack.pop();
		}
		else
		{
			postfix.push_back(' ');
			postfix.push_back(opstack.top());
			opstack.pop();
		}
	}
	postfix.push_back(' ');
	return postfix;
}

int evaluate(vector<char> postfix)
{
	stack<int> mystack;
	int j=0;
	char y,z,prev;
	vector<char>::iterator itr;
	for(itr=postfix.begin();j<postfix.getSize();j++,itr++)
	{
		if(j==0)
			prev=' ';
		else
		{
			itr--;
			prev=*itr;
			itr++;
		}
		y=*itr;
		itr++;
		z=*itr;
		itr--;
		if(isOperand(y)==true)
		{
			if(z>='0' && z<='9')
			{
				int p= y-'0';
				p=p*10;
				int q= z-'0';
				int r=p+q;
				mystack.push(r);
				itr++;
				j++;
			}
			else
			{
				mystack.push(y-'0');
			}
		}
		else if(isOperator(y,z)==1)
		{
			if(isBinary(y,z)==1)
			{
				if(prev==' ')
				{
					int b=mystack.top();
					mystack.pop();
					int a=mystack.top();
					mystack.pop();
					if(y=='+')
						mystack.push(a+b);
					else if(y=='-')
						mystack.push(a-b);
					else if(y=='*')
						mystack.push(a*b);
					else if(y=='/')
						mystack.push(a/b);
				}
			}
			if(isNegative(prev,y,z))
			{
				char a=mystack.top();
				mystack.pop();
				mystack.push(-1 * a);
			}
			else if(isUnary(y,z)!=0)
			{
				char a=mystack.top();
				mystack.pop();
				if(isUnary(y,z)==1)
					mystack.push(a+1);
				else if(isUnary(y,z)==2)
					mystack.push(a-1);
				else if(isUnary(y,z)==3)
					mystack.push(-1 * a);
			}
		}
	}
	return mystack.top();
}

void main()
{
	int m=0;

	while(m!=2)
	{
		system("cls");
		cout<<"_____________ CALCULATOR _____________"<<endl;
		cout<<"1. Evaluate."<<endl;
		cout<<"2. Quit."<<endl;
		cout<<"Press any menu key?"<<endl;
		cin>>m;

		if(m==1)
		{
			vector<char> postfix;
			string infix,b;
			cout<<"Enter Expression:  ";
			getline(cin,b);
			getline(cin,infix);
			cout<<"Evaluate:	"<<infix<<endl;
			postfix=infixToPostfix(infix);
			cout<<"Postfix:	";
			postfix.print_vector();
			cout<<"Answer:		"<<evaluate(postfix)<<endl;
			cout<<endl;
			cout<<"Press any key to continue"<<endl;
		}

		if(m!=2)
			getch();
	}
}
