#pragma once
#include <iostream>
#include "C:\Users\Alizeh\Downloads\help.h"
#include<fstream>
#include<string>
#include<time.h>
#include<stdlib.h>
#include<conio.h>
using namespace std;

class BitVector
{
private:
	unsigned char *bytes;
	int n;
public:
	BitVector()
	{
		n=728000;
		int size=ceil(n/8);
		bytes=new unsigned char[size];
		for (int i=0;i<size;i++)
			bytes[i]=0;
	}
	BitVector(int bno)
	{
		n=bno;
		int size=ceil(n/8);
		bytes=new unsigned char[size];
		for (int i=0;i<size;i++)
			bytes[i]=0;
	}
	void Set(int k)
	{
		int byte=k/8;
		int bno=k%8;
		unsigned char mask=0x80;
		mask=mask>>bno;
		bytes[byte]=bytes[byte]|mask;
	}
	bool Get(int k)
	{
		int byte=k/8;
		int bno=k%8;
		unsigned char mask=0x80;
		mask = mask>>bno;
		return (mask & bytes[byte]);
	}
};

class BloomFilter
{
private:
	BitVector v;
	unsigned int p;
	unsigned int a1;
	unsigned int a2;
	unsigned int a3;
	unsigned int a4;
	unsigned int a5;
	unsigned int a6;
	unsigned int m;
	unsigned int Power(unsigned int a,int power)
	{
		unsigned int r = 1;  // will hold result
		if (a >= p)  
			a %= p;  // makes sure a is smaller than the p
		while (power) 
		{
			if (power & 1)
				r = (r * a) % p;
			power >>= 1;
			if (power)    
				a = (a * a) % p;
		}
		return r;
	}
	unsigned int Generate_a()
	{
		int arr[23];
		srand(time(NULL));
		for (int i=0;i<23;i++)
			{
				Sleep(15);
				int x=rand()%2;
				Sleep(15);
				arr[i]=x;
				Sleep(15);
		    }
		
		//converting from binary to decimal value
		unsigned int num=0;
		int counter=0;
		for (int i=22;i>=0;i--)
		{
			if (arr[i]==0)
				counter++;
			else if (arr[i]==1)
			{
				num=Power(2,counter)+num;
				counter++;
			}
		}
		return num;
	}
public:	
	BloomFilter()
	{
		p=16777213;
		a1=Generate_a();
		a2=Generate_a();
		a3=Generate_a();
		a4=Generate_a();
		a5=Generate_a();
		a6=Generate_a();
		m=728000;
	}
	void print()
	{
		cout << a1;
		cout << endl;
		cout << a2;
		cout << endl;
		cout << a3;
		cout << endl;
		cout << a4;
		cout << endl;
		cout << a5;
		cout << endl;
		cout << a6;
		cout << endl;
	}
	unsigned int Polynomial(string word,unsigned int a)
	{
		unsigned int sum=0;
		unsigned int degree=word.length()-1;
		for (unsigned int i=0;i<word.length();i++)
		{
			unsigned int power=Power(a,degree);
			degree--;
			power=power*int(word[i]);
			sum=sum+power;
			sum=sum%p;
		}
		return sum%m;
	}
	void hashing(string word)
	{
		//generating 6 indices from 6 different values of a by hashing
		int i1=Polynomial(word,a1);
		//cout << v.Get(i1) << endl;
		v.Set(i1);
		//cout << v.Get(i1) << endl;
		//cout << i1 << endl;
		int i2=Polynomial(word,a2);
		v.Set(i2);
		//cout << i2 << endl;
		int i3=Polynomial(word,a3);
		v.Set(i3);
		//cout << i3 << endl;
		int i4=Polynomial(word,a4);
		v.Set(i4);
		//cout << i4 << endl;
		int i5=Polynomial(word,a5);
		v.Set(i5);
		//cout << i5 << endl;
		int i6=Polynomial(word,a6);
		v.Set(i6);
		//cout << i6 << endl;
	}
	bool check(string word)
	{
		int counter=0;
		int i1=Polynomial(word,a1);
		if (v.Get(i1)==true)
			counter++;
		int i2=Polynomial(word,a2);
		if (v.Get(i2)==true)
			counter++;
		int i3=Polynomial(word,a3);
		if (v.Get(i3)==true)
			counter++;
		int i4=Polynomial(word,a4);
		if (v.Get(i4)==true)
			counter++;
		int i5=Polynomial(word,a5);
		if (v.Get(i5)==true)
			counter++;
		int i6=Polynomial(word,a6);
		if (v.Get(i6)==true)
			counter++;
		if (counter==6)
			return true;
		else
			return false;
	}
	void ReadFromFile(string filename)
	{
		ifstream fin(filename);
		string file;
		string modifiedfile;
		char c=-1;
		while (fin.eof()==false)
		{
			fin.get(c);
			file+=c;
		}
		for (int i=0;i<file.length();i++)
		{
			if (file[i]>='A' && file[i]<='Z')
				{
					file[i]=file[i]+32;
					modifiedfile+=file[i];
			    }
			else if ((file[i]=='"') || (file[i]=='!') || (file[i]==',') || (file[i]=='.') || (file[i]==';') || (file[i]==':') || (file[i]=='\''))
				{
			    }
			else
				modifiedfile+=file[i];
		}
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		for (int i=0;i<modifiedfile.length();i++)
		{
			SetConsoleTextAttribute(hConsole,7);
			string word;
			while(modifiedfile[i]!=' ' && i!=modifiedfile.length())
			{
				word+=modifiedfile[i];
				i++;
			}
			if (check(word)==true)
				cout << word << " ";
			else if (check(word)==false)
			{
				SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
				cout << word << " ";
			}
		}
		SetConsoleTextAttribute(hConsole,7);
	}
	void LoadDictionary()
	{
		ifstream fin("dict.txt");
		for (int i=0;fin.eof()==false;i++)
		{
			string word;
			getline(fin,word);
			hashing(word);
		}
	}

};