#include<iostream>
#include<conio.h>
#include<string>

using namespace std;
//1, 2, 6, 9, 10, 11,12, 13, 21 and 23


//QUESTION # 1
void ListNumbersAscending(int start, int end)
{
	if(start==end)
		cout<<start<<endl;
	else
	{
		cout<<start<<" ";
		start++;
		if(start<=end)
			ListNumbersAscending(start,end);
	}
}

void ListNumbersDescending(int start, int end)
{
	if(start==end)
		cout<<start<<endl;
	else
	{
		cout<<end<<" ";
		end--;
		if(end>=start)
			ListNumbersAscending(start,end);
	}
}

//QUESTION # 2
string repeat(string s, int n)
{
	string p;
	if(n==0)
		return p;
	else
	{
		p.append(repeat(s,n-1));
		p.append(s);
	}
	return p;
}

//QUESTION # 6
double harmonicSum(int n) 
{
	double sum=0;
	if(n==1)
		sum=sum+1;
	else
	{
		sum=sum+harmonicSum(n-1);
		sum=sum+( 1/(n*1.0) );
	}
	return sum;
}

//QUESTION # 9
bool isVowel(char c)
{
	if(c=='a'|| c=='A'|| c=='e'|| c=='E'|| c=='i'|| c=='I'|| c=='o'|| c=='O'|| c=='u'|| c=='U')
		return true;
	return false;
}
string removeVowel(string s,string b, int si)
{
	if(s[si]!='\0')
	{
		if(isVowel(s[si])==0)
			b.push_back(s[si]);
		si++;
		b=removeVowel(s,b,si);
	}
	return b;
}
string disemvowel(string s)
{
	int si=0;
	string b;
	b=removeVowel(s,b,si);
	return b;
}

//QUESTION # 10
int sumOfDigits(int n) 
{
	int b=0,sum=0;
	if(n==0)
		return 0;
	else
	{
		b=n%10;
		n=n/10;
		sum=sumOfDigits(n);
		sum=sum+b;
	}
	return sum;
}

//QUESTION # 11
int reverseDigits(int n)
{
	static int sum=0,rem;
   if(n!=0)
   {
      rem=n%10;
      sum=sum*10+rem;
      reverseDigits(n/10);
   }
   else
      return sum;
   return sum;
}


//QUESTION # 13
bool binarySearch(int a[], int start, int end, int x)
{
	bool ans=0;
	int mid=(start+end)/2;
	if(x==a[mid])
		return 1;
	else if (start!=end)
	{
		if(x<a[mid])
			end=mid-1;
		else if(x>a[mid])
			start=mid+1;
		ans=binarySearch(a,start,end,x);
	}
	return ans;
}

//QUESTION # 21
 int choose(int n, int k)
 {
	 int result=0;
	 if(n==0)
		 return 0;
	 else if(k==1)
		 return n;
	 else
		 result=choose(n-1,k-1)+choose(n-1,k);
	 return result;
 }

 //QUESTION # 23
  int countPaths(int n, int m)
  {
	  int ans=0,x=n,y=m;
	  if(x==0 && y==m)
		  ans=0;
	  else if(x==n && y==1)
		  ans=n;
	  else
	  {
		  ans=choose(n-1,m-1)+choose(n-1,m);
	  }
	  return ans;
  }

void main()
{
	ListNumbersAscending(5,10);
	ListNumbersDescending(5,10);

	string n="hello";
	string m=repeat(n,3);
	cout<<m<<endl;

	double sum=harmonicSum(5);
	cout<<sum<<endl;

	string vowel="hello world";
	cout<<disemvowel(vowel)<<endl;

	int a=123456;
	cout<<sumOfDigits(a)<<endl;

	int b=12345;
	cout<<reverseDigits(b)<<endl;
	
	int arr[]={1,3,5,7,9,8,2};
	cout<<binarySearch(arr,0,6,8)<<endl;

	cout<<choose(0,2)<<endl;

	cout<<countPaths(5,3)<<endl;



	getch();
}